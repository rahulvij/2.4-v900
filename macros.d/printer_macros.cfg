######################### PRINT START / END #########################
[gcode_macro PRINT_START]
gcode:
#   SET_TEMPERATURE_LED LED=bed_light SENSOR=heater_bed

    {action_respond_info("Running PRINT START...")}    
    # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_extruder_mesh = params.EXTRUDER_MESH|default("150")|int %}
    {% set target_chamber = params.CHAMBER|default("40")|int %}
    {% set chamber_sensor = printer["temperature_sensor chamber"] %}

    # Homes the printer and sets absolute positioning
    STATUS_HOMING
    G28                   # Full home (XYZ)
    # G90                 # Absolut position

    STATUS_HEATING
    # If the chamber is less than target then soak for 30 mins else 5 mins
    {% if chamber_sensor.temperature|int < target_chamber %}
        PREP_CHAMBER BED={target_bed} CHAMBER={target_chamber} SOAK=60
    {% else %}
        PREP_CHAMBER BED={target_bed} CHAMBER={target_chamber} SOAK=5
    {% endif %}
    
    SET_GCODE_OFFSET Z=0.0      # zero out the offset
    M107                        # Turns off partcooling fan
    G21                         # set units to millimeters

    M109 S{target_extruder_mesh}     # Heats the nozzle to mesh temp
    G32                         # Home XYZ and do QGL

    #KAMP Mesh and line purge 
    STATUS_MESHING
    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 FUZZ_ENABLE=1 LED_ENABLE=1
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE

    # Heats up the nozzle up to target via slicer
    G1 Z10 F9000
    M109 S{target_extruder}     # Heats the nozzle to printing temp

    CLEAN_NOZZLE
    
    SETUP_LINE_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 PURGE_AMOUNT=30
    LINE_PURGE                  # Adaptive Purge

    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
    STATUS_PRINTING
    M117 "Printing..."

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:

    CLEAR_PAUSE					   ; clear pause (from M191) if there is one
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 25) %}
        {% set z_safe = 25 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    {% if printer.toolhead.position.z < 25 %}
        {% set z_safe = 25 %}
    {% endif %}

    G0 Z{z_safe} F3600                      # move nozzle up
    G0 X{x_safe} Y{y_safe} F20000           # move nozzle to remove stringing      
    
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       

    TURN_OFF_HEATERS
    M107                                    # turn off PT fan
    PARK                                    # park nozzle at front
    
    BED_MESH_CLEAR                          # Clear the mesh
    DISPLAY_OFF                             # turn off display
    STATUS_READY
    M117 "Finished Printing..."

######################### PREP FOR PRINT #########################

[gcode_macro PREP_CHAMBER]
gcode:
    {% set target_bed = params.BED|default(110)|int %}
    {% set target_chamber = params.CHAMBER|default(40)|int %}
    {% set soak_delay = params.SOAK|default(60)|float %}
    
    {action_respond_info("Running PREP CHAMBER...")}    

    # Homes the printer and sets absolute positioning
    _CG28                   # Full home (XYZ)
    # G90                     # Absolut position

    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak
    {% if target_bed >= 100 %} 
        PARKCENTER                  # Goes to center of the bed
        M190 S{target_bed}          # Sets target temp for the bed
        M106 S153                   # Turn Fan on at 60%
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
        _SOAK SOAK={soak_delay}

  # If the bed temp is not over 100c then it skips the heatsoak and just heats up to set temp with a 5min soak.
    {% else %} 
        PARKCENTER                  # Goes to center of the bed
        M190 S{target_bed}          # Sets target temp for the bed
        _SOAK SOAK=10                # Waits 5 min for the bedtemp to stabilize
    {% endif %} 

[gcode_macro _SOAK]
gcode:
    {% set soak_delay = params.SOAK|default(30)|float %}    
    {action_respond_info("Starting Soak for %d mins" % (soak_delay) )}

    {% for timer in range(soak_delay|int,0,-1) %}
      M105
      G4 P60000 # Wait 1 minute
    {% endfor %}

    {action_respond_info("Finished Soak")}
       
######################### MOVE/PARK #########################

[gcode_macro _CG28]
description: Helper: Conditional homing
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %} 
        G28 
    {% endif %}

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    STATUS_LEVELING
    BED_MESH_CLEAR                  ; Clear MESH
    _CG28                           ; home all axes
    QUAD_GANTRY_LEVEL
    CLEAN_NOZZLE                    ; Clean the Nozzle now before final home
    G28 Z                           ; home Z
    PARKCENTER                      ; Move to the middle
    STATUS_READY
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro PARKREAR]
gcode:
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G91                                     # relative positioning
    G0 Z{z_safe} F3600                      # move nozzle up
    G90                                     # absolute positioning
    G0 X{max_x-5} Y{max_y-5} F3600          # park nozzle at rear

[gcode_macro PARK]
gcode:
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    {% if printer.toolhead.position.z < (max_z - 10) %}
        {% set z_safe = 10.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    {% if printer.toolhead.position.z < 25 %}
        {% set z_safe = 25 %}
    {% endif %}

    G91                                     # relative positioning
    G0 Z{z_safe} F3600                      # move nozzle up
    G90                                     # absolute positioning
    G0 X295 Y150 F3600                      # park nozzle at rear

[gcode_macro PARKCENTER]
gcode:
    _CG28                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_minimum.z+50} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    
# [gcode_macro PAUSE]
# description: Pause the actual running print
# rename_existing: PAUSE_BASE
# variable_extrude: 1.0
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   ##### set park positon for x and y #####
#   # default is your max posion from your printer.cfg
#   {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
#   {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
#   ##### calculate save lift position #####
#   {% set max_z = printer.toolhead.axis_maximum.z|float %}
#   {% set act_z = printer.toolhead.position.z|float %}
#   {% if act_z < (max_z - 10.0) %}
#       {% set z_safe = 10.0 %}
#   {% else %}
#       {% set z_safe = max_z - act_z %}
#   {% endif %}
#   ##### end of definitions #####
#   SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       \
#   PAUSE_BASE
#   G91
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G1 E-{E} F2100
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}
#   {% if "xyz" in printer.toolhead.homed_axes %}
#     G1 Z{z_safe} F900
#     G90
#     G1 X{x_park} Y{y_park} F6000
#   {% else %}
#     {action_respond_info("Printer not homed")}
#   {% endif %}

# [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   #### get VELOCITY parameter if specified ####
#   {% if 'VELOCITY' in params|upper %}
#     {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
#   {%else %}
#     {% set get_params = "" %}
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G91
#     G1 E{E} F2100
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}  
#   RESUME_BASE {get_params}

# [gcode_macro CANCEL_PRINT]
# description: Cancel the actual running print
# rename_existing: CANCEL_PRINT_BASE
# gcode:
#     SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
#     TURN_OFF_HEATERS
#     CANCEL_PRINT_BASE
#     M107
#     PARK
